# GUI Control Software

## Linux Build Instructions

1. go to <projectroot>/controlsoftware
1. run `qmake`
1. run `make`

## Operation of controlsoftware:

1. ensure serial cable is available as /dev/ttyUSB0
2. run controlsoftware binary as root
3. put desired filename into box above log data checkbox
4. click 'log data' checkbox
5. uncheck the box when you are done. The log can be restarted, and the program will append new data to the end. This will not effect the plotter

## Operation of python plotter:

1. create a new line at the top of the log file, with the following: `TIME,CH4,LOX,HEL`
1. `python plot.py /path/to/logfile.csv`

## Windows Build Instructions

### Dependencies:

- Linux System
- autoconf >= 2.6.8
- automake >= 1.11.3
- bash
- bison
- bzip2
- flex >=2.5.31
- gcc
- gdk-pixbuf
- git >=1.7
- gnu-coreutils
- gnu-gettext
- gnu-gperf
- gnu-make >=3.81
- gnu-sed
- gnu-tar
- intltool >=0.40
- libc (for 32-bit)
- libtool >=2.2
- lzip
- openssl >=1.01
- p7zip
- patch
- perl
- perl xml parser
- pkg-config >=0.16
- python
- ruby
- unzip
- wget
- xz-utils
- zlib >=1.20

### Build

1. `git clone https://github.com/mxe/mxe.git`
1. `cd mxe && make qtbase` (this step takes a while)
1. `cd /path/to/controlsoftware`
1. `<mxe root>/usr/bin/i686-w64-mingw32.static-qmake-qt5`
1. `make`

This provides a 32-bit executable. For a 64-bit executable, build qt with `make MXE_TARGETS=x86_64-w64-mingw32.static qtbase`

These are generic build instructions for Qt5 applications, cross-compiled on Linux targeting Windows. There has been minimal testing with the windows binary, and is not guaranteed to work and is not reccomended.
